var __snds, __utils, __localscaver, __input, oSTAGE, oLANG, oLANG_IMAGES, oVARS, oCONFIG, oUSER, oMODELS, LOADER, THREELOADER, SCREEN, CONTROLS, LEGAL, images, GAME, update_queue = [],
actives = [],
window_in_background = !1,
game_is_active = !1,
date_msg, stats, loader, clock = new THREE.Clock(!0);

function LegalPanel(a) {
    var d = document.getElementById(a || "div_legal");
    d.style.pointerEvents = "none";
    d.style.background = "transparent";
    var b, f;
    a = d.appendChild(document.createElement("table"));
    a.style.margin = "0px";
    a.setAttribute("width", "100%");
    a.border = 0;
    var c = a.appendChild(document.createElement("tr"));
    a = c.appendChild(document.createElement("td"));
    a.style.textAlign = "left";
    a.style.whiteSpace = "nowrap";
    a.setAttribute("valign", "bottom");
    a.setAttribute("cellpadding", "0");
    c = c.appendChild(document.createElement("td"));
    c.style.textAlign = "right";
    c.setAttribute("valign", "bottom");
    c.setAttribute("cellpadding", "0");
    c = c.appendChild(document.createElement("div"));
    c.className = "legal_block";
    c.style.textAlign = "right";
    c.style.background = "transparent";
    c.style.textShadow = "0px 0px 8px black, 0px 0px 8px black";
    for (var g = 0; g < legal_images.length; g++) {
        var h = legal_images[g],
            k = a.appendChild(document.createElement("img"));
        k.className = "legal_image";
        k.src = h.src;
        k.alt = h.alt;
        k.prohibit_touch = !0;
        k.draggable = "false";
        k.ondragstart = function () {
            return !1
        }
    }
    for (g =
        0; g < legal_links.length; g++) legal_links[g].link ? (a = c.appendChild(document.createElement("a")), a.className = platform.isMobile ? "legal_link_mobile" : "legal_link", a.setAttribute("href", legal_links[g].link), a.setAttribute("target", "_blank")) : (a = c.appendChild(document.createElement("div")), a.style.whiteSpace = "nowrap", a.style.pointerEvents = "none", a.prohibit_touch = !0), a.style.fontSize = "14px", __utils.doHTMLText(a, oLANG[legal_links[g].msg]), legal_links[g].after && g < legal_links.length - 1 && (a = c.appendChild(document.createElement("div")),
        a.style.position = "relative", a.style.marginLeft = "4px", a.style.marginRight = "4px", a.style.display = "inline-block", a.innerHTML = legal_links[g].after, a.prohibit_touch = !0);
    this.doHide = function () {};
    this.doShow = function () {};
    this.doResizeUpdate = function () {
        b = oSTAGE.is_landscape ? Math.min(1, oSTAGE.screen_width / 960) : Math.min(1, oSTAGE.screen_width / 800);
        d.style.transform = d.style.webkitTransform = "scale(" + b + "," + b + ")";
        d.style.width = 1 / b * oSTAGE.screen_width + "px";
        f = d.clientHeight * b;
        d.style.left = "0px";
        d.style.top = oSTAGE.screen_height -
            f + "px"
    };
    this.doResizeUpdate();
    update_queue.push({
        doResizeUpdate: this.doResizeUpdate
    })
};

function ControlsPanel() {
    var a = document.getElementById("div_controls"),
        d = document.documentElement;
    if (d.requestFullscreen || d.msRequestFullscreen || d.mozRequestFullScreen || d.webkitRequestFullscreen) {
        var b = a.appendChild(document.createElement("div"));
        b.className = "b_fullscreen";
        b.onclick = function (a) {
            oSTAGE.is_fullscreen ? (__utils.doFullScreenOff(), b.className = "b_fullscreen") : (__utils.doFullScreenOn(), b.className = "b_fullscreen_on")
        };
        b.className = oSTAGE.is_fullscreen ? "b_fullscreen_on" : "b_fullscreen"
    }
    var f =
        a.appendChild(document.createElement("div"));
    f.className = "b_mute";
    f.onclick = function () {
        0 == __snds.toggleMute() ? (f.className = "b_mute_on", oUSER.is_mute = !1) : (f.className = "b_mute", oUSER.is_mute = !0);
        __localsaver.doSaveData("user", oUSER)
    };
    f.className = oUSER.is_mute ? "b_mute" : "b_mute_on";
    var c = a.appendChild(document.createElement("div"));
    c.className = "b_pause";
    c.style.pointerEvents = "none";
    c.style.transform = "translateX(100px)";
    c.onclick = function () {
        GAME.is_paused ? GAME.doUnPause() : GAME.doPause()
    };
    this.doResizeUpdate =
        function () {
            var c;
            c = oSTAGE.is_landscape ? Math.min(1, oSTAGE.screen_width / 960) : Math.min(1, oSTAGE.screen_width / 640);
            a.style.transform = a.style.webkitTransform = "scale(" + c + "," + c + ")"
        };
    this.doShowPause = function () {
        c.style.pointerEvents = "auto";
        TweenLite.set(c, {
            transform: "translateX(100px)",
            overwrite: !0
        });
        TweenLite.to(c, 1.2, {
            transform: "translateX(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .5)
        })
    };
    this.doHidePause = function () {
        c.style.pointerEvents = "none";
        TweenLite.to(c, .4, {
            transform: "translateX(100px)",
            overwrite: !0,
            ease: Back.easeIn.config(1.5)
        })
    };
    this.doResizeUpdate();
    update_queue.push({
        doResizeUpdate: this.doResizeUpdate
    })
};

function PopupPause(a) {
    var d = this,
        b = document.getElementById("div_pause");
    __utils.doDestroyAllChildren(b);
    var f = b.appendChild(document.createElement("div"));
    f.className = "pause_menu_block";
    for (var c = 0; c < a.length; c++) {
        var g = a[c],
            h = f.appendChild(document.createElement("div"));
        h.className = "pause_menu";
        __utils.doHTMLText(h, g.msg);
        h.callback = g.callback;
        h.snd = g.snd;
        h.onmouseup = function (a) {
            a.target.callback();
            __snds.playSound(a.target.snd, "interface");
            d.doDestroy()
        }
    }
    this.doResizeUpdate = function () {
        var a = Math.min(Infinity,
            oSTAGE.screen_width / 800, oSTAGE.screen_height / 800);
        b.style.transform = b.style.webkitTransform = "scale(" + a + "," + a + ")";
        b.style.width = 1 / a * oSTAGE.screen_width + "px";
        b.style.height = 1 / a * oSTAGE.screen_height + "px";
        f.style.top = .5 * (b.clientHeight - f.clientHeight) + "px"
    };
    this.doReveal = function () {};
    this.doDestroy = function () {
        __utils.doDestroyAllChildren(b);
        k.forget = !0;
        b.style.display = "none";
        __snds.unforceMute()
    };
    __snds.forceMute();
    b.style.display = "block";
    d.doResizeUpdate();
    d.doReveal();
    var k = {
        doResizeUpdate: d.doResizeUpdate
    };
    update_queue.push(k)
};

function Loader(a) {
    var d = this,
        b = document.getElementById("div_loading");
    __utils.doDestroyAllChildren(b);
    b.style.display = "block";
    b.style.opacity = 1;
    this.doResizeUpdate = function () {
        trace("loading -> doResizeUpdate()");
        var a = Math.min(Infinity, oSTAGE.screen_width / 800, oSTAGE.screen_height / 800);
        b.style.transform = b.style.webkitTransform = "scale(" + a + "," + a + ")";
        b.style.width = 1 / a * oSTAGE.screen_width + "px";
        b.style.height = 1 / a * oSTAGE.screen_height + "px"
    };
    this.doUpdateBar = function (a) {
        g.style.width = 100 * a + "%"
    };
    this.doFadeAndDestroy =
        function () {
            __utils.doDestroyAllChildren(b);
            TweenLite.to(b, 1, {
                opacity: 0,
                overwrite: !0,
                onComplete: d.doDestroy
            })
        };
    this.doDestroy = function () {
        __utils.doDestroyAllChildren(b);
        h.forget = !0;
        b.style.display = "none"
    };
    var f = b.appendChild(document.createElement("table"));
    f.setAttribute("border", "0");
    f.setAttribute("width", "100%");
    f.setAttribute("height", "100%");
    f = f.appendChild(document.createElement("tr")).appendChild(document.createElement("td"));
    f.setAttribute("align", "center");
    f.setAttribute("valign", "middle");
    if (a) {
        a = f.appendChild(document.createElement("div"));
        a.className = "film_logo_block";
        a.style.position = "relative";
        a.style.display = "block";
        a.style.top = "20px";
        a.style.left = "0px";
        var c = a.appendChild(document.createElement("img"));
        c.className = "film_logo_img";
        c.style.height = "100px";
        c.src = oLANG_IMAGES.logo;
        c.onload = function () {
            d.doResizeUpdate()
        };
        a = a.appendChild(document.createElement("div"));
        a.className = "film_logo_date";
        __utils.doHTMLText(a, date_msg)
    }
    a = f.appendChild(document.createElement("div"));
    a.className =
        "loader_spinner";
    a.style.position = "relative";
    a.style.display = "block";
    f = f.appendChild(document.createElement("div"));
    f.className = "loader_bar";
    f.style.position = "relative";
    f.style.display = "block";
    var g = f.appendChild(document.createElement("div"));
    g.className = "loader_bar_fill";
    d.doResizeUpdate();
    var h = {
        doResizeUpdate: d.doResizeUpdate
    };
    update_queue.push(h)
};

function TitleScreen() {
    var a = this,
        d = function () {
            __snds.playSound("music_title_loop", "music", -1, .25);
            window.removeEventListener("touchstart", d)
        };
    "music_title_loop" != __snds.getNowPlaying("music") && (platform.isMobile && !__snds.initialized ? window.addEventListener("touchstart", d, {
        passive: !1,
        capture: !1
    }) : __snds.playSound("music_title_loop", "music", -1, .25));
    var b = document.getElementById("div_screens");
    __utils.doDestroyAllChildren(b);
    var f = b.appendChild(document.createElement("div"));
    f.className = "character_title";
    var c = b.appendChild(document.createElement("div"));
    c.className = "film_logo_block";
    var g = c.appendChild(document.createElement("img"));
    g.className = "film_logo_img";
    g.src = oLANG_IMAGES.logo;
    g = c.appendChild(document.createElement("div"));
    g.className = "film_logo_date";
    __utils.doHTMLText(g, date_msg);
    var h = b.appendChild(document.createElement("div"));
    h.className = "game_logo";
    __utils.doHTMLText(h, oLANG.title);
    var k = b.appendChild(document.createElement("div"));
    k.className = "b_main";
    __utils.doHTMLText(k, oLANG.main_site);
    k.onmouseup = function (a) {
        window.open(main_site_url, "_blank")
    };
    var r = b.appendChild(document.createElement("div"));
    var l = b.appendChild(document.createElement("div"));
    r.className = "b_play";
    l.className = "b_instructions";
    __utils.doHTMLText(r, oLANG.play);

    var titleNavigation = {};
    titleNavigation.hasFocus = r;
    titleNavigation.playButton = r;
    titleNavigation.instructionButton = l;

    titleNavigation.doUpdate = function(){
        if(__input.right){
            if(this.hasFocus == this.playButton){
                TweenLite.to(this.playButton, .5, {transform: "scale(1.0, 1.0)", overwrite:true, ease: Elastic.easeOut.config(1, 0.5)});
                TweenLite.to(this.instructionButton, .1, {transform: "scale(1.1, 1.1)", overwrite:true});
                this.hasFocus = this.instructionButton;
                console.log("Instruction Focused");
            }
        }
        else if (__input.left){
            if(this.hasFocus == this.instructionButton){
                TweenLite.to(this.instructionButton, .5, {transform: "scale(1.0, 1.0)", overwrite:true, ease: Elastic.easeOut.config(1, 0.5)});
                TweenLite.to(this.playButton, .1, {transform: "scale(1.1, 1.1)", overwrite:true});
                this.hasFocus = this.playButton;
                console.log("Play Focused");
            }
        }
        else if (__input.enter){
            if(this.hasFocus.className == this.playButton.className){
                console.log("Enter Play");
                this.hasFocus = null;
                this.forget = true;
                a.doDestroy();
                doFinishLoading(function () {
                    SCREEN = new GameScreen;
                    GAME = new Game
                });
                __snds.playSound("snd_click", "interface")
            }
            else if(this.hasFocus.className == this.instructionButton.className){
                console.log("Enter Instruction");
                this.hasFocus = null;
                this.forget = true;
                __snds.playSound("snd_click", "interface");
                a.doDestroy();
                SCREEN = new InstructionsScreen
            }
        }
    }

    actives.push(titleNavigation);
    
    r.onmouseup = function (c) {
        a.doDestroy();
        doFinishLoading(function () {
            SCREEN = new GameScreen;
            GAME = new Game
        });
        __snds.playSound("snd_click", "interface")
    };
    r.onmouseover = function (a) {
        TweenLite.to(a.target, .1, {
            transform: "scale(1.1, 1.1)",
            overwrite: !0
        })
    };
    r.onmouseout = function (a) {
        TweenLite.to(a.target, .5, {
            transform: "scale(1.0, 1.0)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1,
                .5)
        })
    };
    

    __utils.doHTMLText(l, oLANG.instructions);
    l.onmouseup = function (c) {
        __snds.playSound("snd_click", "interface");
        a.doDestroy();
        SCREEN = new InstructionsScreen
    };
    l.onmouseover = function (a) {
        TweenLite.to(a.target, .1, {
            transform: "scale(1.1, 1.1)",
            overwrite: !0
        })
    };
    l.onmouseout = function (a) {
        TweenLite.to(a.target, .5, {
            transform: "scale(1.0, 1.0)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .5)
        })
    };
    this.doResizeUpdate = function () {
        var a;
        oSTAGE.is_landscape ? (a = Math.max(k.clientWidth + 20 + .5 * c.clientWidth, .33 * oSTAGE.wrapper_width) | 0, r.style.left = (a - .5 * r.clientWidth | 0) + "px", l.style.right = (.5 * (oSTAGE.wrapper_width - (r.offsetLeft + r.clientWidth)) - .5 * l.clientWidth | 0) + "px", r.style.bottom = "58px", l.style.bottom = "58px") : (a = .5 * oSTAGE.wrapper_width, r.style.left = "24px", l.style.right = "24px", r.style.bottom = "80px", l.style.bottom = "80px");
        c.style.left = (a - .5 * c.clientWidth | 0) + "px";
        h.style.left = (a - .5 * h.clientWidth | 0) + "px"
    };
    this.doReveal = function () {
        f.style.transform =
            "translateX(" + (oSTAGE.wrapper_width - f.offsetLeft) + "px)";
        r.style.transform = "translateY(" + (oSTAGE.wrapper_height - r.offsetTop) + "px)";
        l.style.transform = "translateY(" + (oSTAGE.wrapper_height - l.offsetTop) + "px)";
        var a = 1.1;
        TweenLite.to(f, 1, {
            transform: "translateX(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: a
        });
        a += 1;
        TweenLite.to(r, .75, {
            transform: "translateY(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: a
        });
        a += .25;
        TweenLite.to(l, .75, {
            transform: "translateY(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1,
                .8),
            delay: a
        });
        a += .25;
        TweenLite.to(r, .1, {
            transform: "scale(1.1, 1.1)",
            overwrite: !0,
            delay: a
        });
    };
    this.doDestroy = function () {
        __utils.doDestroyAllChildren(b);
        t.forget = !0
    };
    a.doResizeUpdate();
    a.doReveal();
    var t = {
        doResizeUpdate: a.doResizeUpdate
    };
    update_queue.push(t)
};

function InstructionsScreen() {
    var a = this,
        d = document.getElementById("div_screens");
    __utils.doDestroyAllChildren(d);
    d.style.backgroundColor = "rgba(0,38,65,.5)";
    var b = d.appendChild(document.createElement("div"));
    b.className = "instructions_header";
    __utils.doHTMLText(b, oLANG.instructions);
    var f = d.appendChild(document.createElement("div"));
    f.className = "instructions_image";
    f.style.backgroundImage = platform.isMobile ? "url('media/instructions.gif')" : "url('media/instructions_PC.gif')";
    var c = d.appendChild(document.createElement("div"));
    c.className = "b_play";
    __utils.doHTMLText(c, oLANG.play);

    var instructionNav = {};
    __input.enter = false; //Prevents key firing before BlitInput key up event clears the state
    instructionNav.doUpdate = function(){
        if (__input.enter){
            console.log("Input Enter");

            this.forget = true;
            a.doDestroy();
            doFinishLoading(function () {
                SCREEN = new GameScreen;
                GAME = new Game
            });
            __snds.playSound("snd_click", "interface")
        }
    }

    actives.push(instructionNav);

    c.onmouseup = function (c) {
        a.doDestroy();
        doFinishLoading(function () {
            SCREEN = new GameScreen;
            GAME = new Game
        });
        __snds.playSound("snd_click", "interface")
    };
    c.onmouseover = function (a) {
        TweenLite.to(a.target, .1, {
            transform: "scale(1.1, 1.1)",
            overwrite: !0
        })
    };
    c.onmouseout = function (a) {
        TweenLite.to(a.target, .5, {
            transform: "scale(1.0, 1.0)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .5)
        })
    };
    this.doResizeUpdate = function () {
        c.style.left = .5 * oSTAGE.wrapper_width - .5 * c.clientWidth +
            "px";
        c.style.bottom = oSTAGE.is_landscape ? "58px" : "80px";
        var a = b.offsetTop + b.clientHeight + 10,
            g = c.offsetTop - 10;
        f.style.top = a + "px";
        f.style.height = g - a + "px";
        f.style.width = Math.min(768, oSTAGE.wrapper_width - 20) + "px";
        f.style.left = .5 * (d.clientWidth - f.clientWidth) + "px"
    };
    this.doReveal = function () {
        c.style.transform = "translateY(" + (oSTAGE.wrapper_height - c.offsetTop) + "px)";
        TweenLite.to(c, .75, {
            transform: "translateY(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: .5
        })
    };
    this.doDestroy = function () {
        d.style.backgroundColor =
            "";
        __utils.doDestroyAllChildren(d);
        g.forget = !0
    };
    a.doResizeUpdate();
    a.doReveal();
    var g = {
        doResizeUpdate: a.doResizeUpdate
    };
    update_queue.push(g)
};

function GameScreen() {
    var a = this,
        d, b = document.getElementById("div_screens");
    __utils.doDestroyAllChildren(b);
    b.style.backgroundColor = "";
    var f = b.appendChild(document.createElement("div"));
    f.className = "hud_score";
    __utils.doHTMLText(f, oLANG.hud_score);
    var c = b.appendChild(document.createElement("div"));
    c.className = "game_button_left";
    c.allow_touch = !0;
    c.ontouchstart = function (a) {
        a.target.style.backgroundPosition = "-200px 0px";
        GAME.left_down = !0;
        a.preventDefault()
    };
    c.ontouchend = function (a) {
        a.target.style.backgroundPosition =
            "0px 0px";
        GAME.left_down = !1
    };
    var g = b.appendChild(document.createElement("div"));
    g.className = "game_button_right";
    g.allow_touch = !0;
    g.ontouchstart = function (a) {
        a.target.style.backgroundPosition = "-200px 0px";
        GAME.right_down = !0;
        a.preventDefault()
    };
    g.ontouchend = function (a) {
        a.target.style.backgroundPosition = "0px 0px";
        GAME.right_down = !1
    };
    var h = b.appendChild(document.createElement("div"));
    h.className = "hud_messages";
    h.style.display = "none";
    platform.isMobile || (c.style.display = "none", g.style.display = "none");
    this.doUpdateScore =
        function (a) {};
    this.doShowMessage = function (c, f) {
        __utils.doHTMLText(h, c);
        h.style.opacity = 1;
        h.style.display = "block";
        h.style.left = .5 * (b.clientWidth - h.clientWidth) + "px";
        h.style.top = .5 * (b.clientHeight - h.clientHeight) + "px";
        clearTimeout(d);
        f && (d = setTimeout(a.doHideMessage, 1E3 * f))
    };
    this.doHideMessage = function () {
        TweenLite.to(h, .5, {
            opacity: 0,
            overwrite: !0,
            onComplete: function () {
                h.style.display = "none"
            }
        })
    };
    this.doResizeUpdate = function () {
        h.style.left = .5 * (b.clientWidth - h.clientWidth) + "px";
        h.style.top = .5 * (b.clientHeight -
            h.clientHeight) + "px"
    };
    this.doReveal = function () {
        c.style.transform = "translateX(-256px)";
        g.style.transform = "translateX(256px)";
        TweenLite.to(c, .5, {
            transform: "translateX(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: 1
        });
        TweenLite.to(g, .5, {
            transform: "translateX(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: 1
        })
    };
    this.doHide = function () {
        TweenLite.to(c, .5, {
            transform: "translateX(-256px)",
            overwrite: !0,
            ease: Elastic.easeIn.config(1, .8),
            lazy: !0
        });
        TweenLite.to(g, .5, {
            transform: "translateX(256px)",
            overwrite: !0,
            ease: Elastic.easeIn.config(1, .8),
            lazy: !0
        })
    };
    this.doDestroy = function () {
        __utils.doDestroyAllChildren(b);
        k.forget = !0
    };
    a.doResizeUpdate();
    a.doReveal();
    var k = {
        doResizeUpdate: a.doResizeUpdate
    };
    update_queue.push(k)
};

function RecapScreen() {
    var a = this;
    a.id = "screen";
    "music_title_loop" != __snds.getNowPlaying("music") && __snds.playSound("music_title_loop", "music", -1, .25);
    var d = document.getElementById("div_screens");
    __utils.doDestroyAllChildren(d);
    var b = d.appendChild(document.createElement("div"));
    b.className = "character_recap";
    var f = d.appendChild(document.createElement("div"));
    f.className = "film_logo_block";
    var c = f.appendChild(document.createElement("img"));
    c.className = "film_logo_img";
    c.src = oLANG_IMAGES.logo;
    c = f.appendChild(document.createElement("div"));
    c.className = "film_logo_date";
    __utils.doHTMLText(c, date_msg);
    var g = d.appendChild(document.createElement("table"));
    g.className = "recap_table";
    g.style.margin = "0px";
    g.setAttribute("border", "0");
    var c = g.appendChild(document.createElement("tr")),
        h = c.appendChild(document.createElement("td"));
    h.className = "recap_tablecell";
    h.style.textAlign = "right";
    h.style.fontSize = "65px";
    h.setAttribute("valign", "middle");
    __utils.doHTMLText(h, oLANG.score);
    c = c.appendChild(document.createElement("td"));
    c.className = "recap_tablecell";
    c.style.textAlign = "left";
    c.style.fontSize = "115px";
    c.style.color = "white";
    c.setAttribute("valign", "middle");
    __utils.doHTMLText(c, GAME.score);
    c = g.appendChild(document.createElement("tr"));
    h = c.appendChild(document.createElement("td"));
    h.className = "recap_tablecell";
    h.style.textAlign = "right";
    h.style.fontSize = "50px";
    h.setAttribute("valign", "middle");
    __utils.doHTMLText(h, oLANG.best_score);
    c = c.appendChild(document.createElement("td"));
    c.className = "recap_tablecell";
    c.style.textAlign = "left";
    c.style.fontSize =
        "75px";
    c.style.color = "white";
    c.setAttribute("valign", "middle");
    __utils.doHTMLText(c, oUSER.best_score);
    var k = d.appendChild(document.createElement("div"));
    k.className = "b_play";
    __utils.doHTMLText(k, oLANG.play_again);

    var recapNav = {};
    recapNav.doUpdate = function(){
        if(__input.enter){
            this.forget = true;
            __snds.playSound("snd_click", "interface");
            a.doDestroy();
            doFinishLoading(function () {
                SCREEN = new GameScreen;
                GAME = new Game
            })
        }
    }

    actives.push(recapNav);

    k.onmouseup = function (c) {
        __snds.playSound("snd_click", "interface");
        a.doDestroy();
        doFinishLoading(function () {
            SCREEN = new GameScreen;
            GAME = new Game
        })
    };
    k.onmouseover = function (a) {
        TweenLite.to(a.target, .1, {
            transform: "scale(1.1, 1.1)",
            overwrite: !0
        })
    };
    k.onmouseout = function (a) {
        TweenLite.to(a.target,
            .5, {
                transform: "scale(1.0, 1.0)",
                overwrite: !0,
                ease: Elastic.easeOut.config(1, .5)
            })
    };
    var r = d.appendChild(document.createElement("div"));
    r.className = "b_main";
    __utils.doHTMLText(r, oLANG.main_site);
    r.onmouseup = function (a) {
        window.open(main_site_url, "_blank")
    };
    this.doResizeUpdate = function () {
        var a;
        a = oSTAGE.is_landscape ? Math.max(r.clientWidth + 20 + .5 * f.clientWidth, .33 * oSTAGE.wrapper_width) : .5 * oSTAGE.wrapper_width;
        f.style.left = a - .5 * f.clientWidth + "px";
        k.style.left = a - .5 * k.clientWidth + "px";
        g.style.left = a - .5 * g.clientWidth +
            "px";
        k.style.bottom = oSTAGE.is_landscape ? "58px" : "80px"
    };
    this.doReveal = function () {
        b.style.transform = "translateX(" + (oSTAGE.wrapper_width - b.offsetLeft) + "px)";
        k.style.transform = "translateY(" + (oSTAGE.wrapper_height - k.offsetTop) + "px)";
        var a = 1;
        TweenLite.to(b, 1, {
            transform: "translateX(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: a
        });
        a += 1;
        TweenLite.to(k, .75, {
            transform: "translateY(0px)",
            overwrite: !0,
            ease: Elastic.easeOut.config(1, .8),
            delay: a
        })
    };
    this.doDestroy = function () {
        __utils.doDestroyAllChildren(d);
        l.forget = !0
    };
    a.doResizeUpdate();
    a.doReveal();
    var l = {
        doResizeUpdate: a.doResizeUpdate
    };
    update_queue.push(l)
};
var Game = function () {
    trace("new game");
    window.focus();
    var a = this,
        d;
    a.score = 0;
    a.level = 1;
    a.difficulty = 0;
    var b = a.is_paused = !1,
        f = 0,
        c = [],
        g, h, c = [];
    LEGAL.doHide();
    __snds.stopSound("music");
    music_playing = null;
    var k = document.getElementById("canvas_game"),
        r, l, t, u, m, L, O, U, H;
    a.left_down = !1;
    a.right_down = !1;
    this.doInit = function () {
        r = k.renderer || new THREE.WebGLRenderer({
            canvas: k,
            antialias: !0,
            alpha: !1,
            shadows: !1
        });
        l = new THREE.Scene;
        t = new THREE.PerspectiveCamera(45, oSTAGE.screen_width / oSTAGE.screen_height, .1, 500);
        l.add(t);
        d = new THREE.Group;
        d.position.set(0, 0, -1);
        t.add(d);
        a.doCreateScoreDigits();
        var e = new THREE.AmbientLight(new THREE.Color(.6, .6, .6));
        l.add(e);
        e = new THREE.SpotLight(new THREE.Color(1, 1, 1));
        e.position.set(2, 20, 10);
        e.angle = .4;
        e.penumbra = .6;
        e.intensity = 1;
        e.distance = 0;
        e.castShadow = !0;
        e.shadow.mapSize.width = 512;
        e.shadow.mapSize.height = 512;
        e.shadow.camera.near = .5;
        e.shadow.camera.far = 50;
        l.add(e);
        l.background = oMODELS.sky;
        oMODELS.sky.repeat = new THREE.Vector2(oSTAGE.screen_width / oSTAGE.screen_height * .25, 1);
        oMODELS.sky.wrapS =
            THREE.RepeatWrapping;
        u = new THREE.Group;
        l.add(u);
        e = oMODELS.deck.clone();
        e.material.map.minFilter = THREE.LinearMipMapLinearFilter;
        e.castShadow = !1;
        e.receiveShadow = !0;
        u.add(e);
        m = a.doCreatePlayer();
        u.add(m);
        L = new SPE.Group({
            texture: {
                value: oMODELS.particle_water
            },
            blending: THREE.AdditiveBlending,
            transparent: !0,
            maxParticleCount: 20
        });
        H = new SPE.Emitter({
            particleCount: 20,
            duration: .5,
            maxAge: {
                value: 1
            },
            activeMultiplier: 2,
            position: {
                value: new THREE.Vector3(0, 0, 0),
                spread: new THREE.Vector3(1, 1, 1)
            },
            velocity: {
                value: new THREE.Vector3(-20,
                    32, 0),
                spread: new THREE.Vector3(8, 4, 1)
            },
            acceleration: {
                value: new THREE.Vector3(0, -42, 0)
            },
            size: {
                value: [4 * oSTAGE.scale, 3 * oSTAGE.scale],
                spread: [3 * oSTAGE.scale]
            },
            angle: {
                value: [__utils.radFromDeg(360), __utils.radFromDeg(180)]
            }
        });
        L.addEmitter(H);
        l.add(L.mesh);
        H.disable();
        t.position.set(0, 3.5, 24);
        t.lookAt(new THREE.Vector3(0, 3.5, 0));
        r.render(l, t);
        a.doResizeUpdate();
        g = {
            doResizeUpdate: a.doResizeUpdate
        };
        update_queue.push(g);
        h = {
            doUpdate: a.doFrameUpdate
        };
        actives.push(h);
        k.style.opacity = 1;
        k.style.display = "block";
        SCREEN.doShowMessage(oLANG.msg_ready, null);
        setTimeout(a.doGo, 2E3)
    };
    this.doCreateScoreDigits = function () {
        O = [];
        for (var e, c = 0; 6 >= c; c++) e = new THREE.SpriteMaterial({
            map: oMODELS.score_digits.clone(),
            fog: !1,
            flatShading: !0,
            transparent: !0
        }), e = new THREE.Sprite(e), e.material.map.repeat = new THREE.Vector2(.1, 1), e.material.map.offset = new THREE.Vector2(.1 * c, 0), e.material.map.needsUpdate = !0, e.center = new THREE.Vector2(0, 1), e.position.set(.0575 * c, 0, 1E-4 * c), e.scale.set(.0764928, .096, 1), e.renderDepth = 1, d.add(e), O.push(e);
        a.doUpdateGameScore()
    };
    this.doUpdateGameScore = function () {
        var e, c = String(a.score).split(""),
            b = 0;
        for (e = 0; e < c.length; e++) {
            var f = O[b];
            f.material.map.offset.x = .1 * parseInt(c[e]);
            f.visible = !0;
            b++
        }
        for (e = Math.max(2, b + 1); 7 >= e; e++) f = O[e - 1], f.visible = !1
    };
    this.doDestroy = function () {
        c = [];
        L.dispose();
        g.forget = !0;
        h.forget = !0;
        if (l)
            for (; 0 < l.children.length;) l.remove(l.children[0]);
        l = null;
        TweenLite.to(k, .5, {
            opacity: 0,
            overwrite: !0,
            onComplete: function () {
                k.style.display = "none"
            }
        });
        GAME = null;
        is_active = !1
    };
    this.doResizeUpdate =
        function () {
            t.aspect = oSTAGE.screen_width / oSTAGE.screen_height;
            t.updateProjectionMatrix();
            oMODELS.sky.repeat = new THREE.Vector2(oSTAGE.screen_width / oSTAGE.screen_height * .5, 1);
            r.setSize(oSTAGE.screen_width, oSTAGE.screen_height);
            var a;
            a = oSTAGE.is_landscape ? 25 : 20;
            var c = r.getSize(),
                b = c.width / c.height;
            t.fov = 180 / Math.PI * Math.atan(a / b / 48) * 2;
            t.updateProjectionMatrix();
            a = 48 * Math.tan(t.fov * Math.PI / 180 * .5);
            var f = 2 * Math.tan(t.fov * Math.PI / 180 / 2),
                b = f * b,
                c = b / c.width;
            d.position.set(.5 * -b + 10 * c * oSTAGE.scale, .5 * f - 40 * c *
                oSTAGE.scale, -1);
            t.position.y = Math.max(0, -(15 - .5 * a)) + 3.5;
            t.lookAt.y = t.position.y - 3.5;
            r.render(l, t)
        };
    this.doPause = function () {
        a.is_paused = !0;
        new PopupPause([{
            snd: "snd_click",
            msg: oLANG.quit,
            callback: a.doQuit
        }, {
            snd: "snd_click",
            msg: oLANG.resume,
            callback: a.doUnPause
        }])
    };
    this.doUnPause = function () {
        a.is_paused = !1
    };
    this.doQuit = function () {
        __snds.stopSound("music");
        CONTROLS.doHidePause();
        SCREEN = new TitleScreen;
        LEGAL.doShow();
        a.doDestroy();

        try {
            nz.nzappapi.AppShutdown();
        }
        catch (err) {
            console.log("Error calling AppShutdown.");
        }
    };
    this.doGo = function () {
        SCREEN.doShowMessage(oLANG.msg_go, 1);
        clock.start();
        V = 0;
        b = !0;
        I = 0;
        __snds.playSound("music_game_loop", "music", -1, .25);
        CONTROLS.doShowPause();
        a.doNextTilt()
    };
    this.doGameOver = function () {
        clock.stop();
        SCREEN.doShowMessage(oLANG.msg_gameover, null);
        b = !1;
        oUSER.best_score = Math.max(oUSER.best_score, a.score);
        __localsaver.doSaveData("user", oUSER);
        __snds.playSound("music_game_end", "music", 1, .25);
        CONTROLS.doHidePause();
        setTimeout(a.doGotoRecap, 3E3)
    };
    this.doGotoRecap = function () {
        SCREEN = new RecapScreen;
        LEGAL.doShow();
        a.doDestroy()
    };
    this.doCreateJr = function () {
        var a =
            new THREE.Group,
            b = oMODELS.blobby_jr.clone();
        b.matrixAutoUpdate = !1;
        b.updateMatrix();
        b.updateMatrixWorld();
        b.material.blending = THREE.NormalBlending;
        b.material.transparent = !0;
        b.castShadow = !0;
        b.receiveShadow = !1;
        b.getObjectByName("Base").rotation.x = __utils.radFromDeg(0);
        var f = b.getObjectByName("Spine_01"),
            d = b.getObjectByName("Spine_02");
        b.getObjectByName("Base");
        var g = b.getObjectByName("arm_01_L"),
            h = b.getObjectByName("arm_01_R");
        h.rotation.z -= .5;
        g.rotation.z -= .5;
        var k = b.getObjectByName("arm_02_L"),
            l = b.getObjectByName("arm_02_R");
        l.rotation.y -= .5;
        k.rotation.y -= .5;
        P = b.getObjectByName("Eye_L");
        Q = b.getObjectByName("Eye_R");
        var m = [f, d, P, Q, g, h, k, l];
        for (i = 0; i < m.length; i++) m[i].my_rot = m[i].rotation.clone(), m[i].my_pos = m[i].position.clone();
        a.stretch = 2;
        d.scale.set(.2, .2, .2);
        var p = new THREE.Vector3(1, 1, 1),
            n = new __utils.NewPulse(10, {
                seed: 0
            }),
            q = new __utils.NewPulse(6, {
                seed: 180
            });
        a.doUpdate = function () {
            n.update();
            q.update();
            var a = .1 * n.value;
            f.rotation.z = f.my_rot.z + a;
            d.rotation.z = d.my_rot.z + a;
            g.rotation.z = g.my_rot.z + a;
            h.rotation.z = h.my_rot.z +
                a;
            k.rotation.y = k.my_rot.y + a;
            l.rotation.y = l.my_rot.y + a;
            a = q.value_normal * (.2 + this.stretch);
            this.stretch *= .9;
            f.position.x = f.my_pos.x + a;
            d.position.x = d.my_pos.x + a;
            d.scale.lerp(p, .1)
        };
        c.push(a);
        a.actor = b;
        a.position.y = .1;
        a.add(b);
        return a
    };
    this.doCreatePlayer = function () {
        var a = new THREE.Group,
            b = oMODELS.blobby.clone();
        b.matrixAutoUpdate = !1;
        b.updateMatrix();
        b.updateMatrixWorld();
        b.castShadow = !0;
        b.receiveShadow = !1;
        b.getObjectByName("Base").rotation.x = __utils.radFromDeg(180);
        b.motions = {};
        b.mixer = new THREE.AnimationMixer(b);
        for (var d = 0; d < b.geometry.animations.length; d++) b.motions[b.geometry.animations[d].name] = b.mixer.clipAction(b.geometry.animations[d]);
        b.mixer.update(0);
        b.frustumCulled = !1;
        d = ["varying vec2 vUv;\nvarying vec3 vViewPosition;", THREE.ShaderChunk.common, THREE.ShaderChunk.skinning_pars_vertex, "void main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.begin_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.project_vertex, "vViewPosition = -mvPosition.xyz;\nvUv = uv;\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n");
        d = new THREE.ShaderMaterial({
            uniforms: {
                t_green: {
                    type: "t",
                    value: oMODELS.blobby_green
                },
                t_orange: {
                    type: "t",
                    value: oMODELS.blobby_orange
                },
                t_purple: {
                    type: "t",
                    value: oMODELS.blobby_purple
                },
                sick: {
                    type: "f",
                    value: 0
                }
            },
            skinning: !0,
            transparent: !0,
            flatShading: !0,
            blending: THREE.NormalBlending,
            vertexShader: d,
            fragmentShader: "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D t_green;\nuniform sampler2D t_orange;\nuniform sampler2D t_purple;\nuniform float sick;\nvarying vec2 vUv;\nvoid main(void){\nvec4 c_green = texture2D(t_green, vUv);\nvec4 c_orange = texture2D(t_orange, vUv);\nvec4 c_purple = texture2D(t_purple, vUv);\nif(sick < 0.5){\ngl_FragColor = mix(c_green, c_orange, sick * 2.0) * c_orange.a;\n}else{\ngl_FragColor = mix(c_orange, c_purple, (sick - 0.5) * 2.0) * c_purple.a;\n}\n}"
        });
        b.material = d;
        b.material.needUpdate = !0;
        a.actor = b;
        a.position.y = .1;
        a.add(b);
        p = b.getObjectByName("spine01");
        n = b.getObjectByName("spine04");
        q = b.getObjectByName("spine05");
        W = b.getObjectByName("spine06");
        y = b.getObjectByName("shoulder_L");
        w = b.getObjectByName("Elbow_L");
        X = b.getObjectByName("Wrist_L");
        z = b.getObjectByName("shoulder_R");
        A = b.getObjectByName("Elbow_R");
        Y = b.getObjectByName("Wrist_R");
        D = b.getObjectByName("Eye_L");
        E = b.getObjectByName("Eye_R");
        for (var g = [D, E, p, n, q, W, w, A, X, Y, y, z], d = 0; d < g.length; d++) g[d].my_rot =
            g[d].rotation.clone(), g[d].my_pos = g[d].position.clone();
        a.sick = 0;
        a.doUpdate = function () {
            b.material.uniforms.sick.value = this.sick;
            this.actor.mixer.update(f)
        };
        c.push(a);
        return a
    };
    var p, n, q, W, w, A, y, z, X, Y, D, E, P, Q, B = 0,
        J = 0,
        F = 0,
        v = 0,
        x = 0,
        G = 0,
        I = 0,
        Z = !1,
        K = 0,
        M = new __utils.NewPulse(5, {
            seed: 180
        }),
        R = new __utils.NewPulse(8),
        aa = new __utils.NewPulse(2),
        ba = new __utils.NewPulse(11, {
            seed: 90
        }),
        ca = new __utils.NewPulse(11),
        C = 1,
        N = -1,
        S = 1,
        T = 0,
        V = 0;
    this.doNextTilt = function () {
        if (b) {
            N++;
            N > game_sequence.length - 1 && (N = 0);
            var a = (B = game_sequence[N].amt) ?
                0 > B ? -1 : 1 : 0;
            J = game_sequence[N].speed * a;
            S = a
        } else S *= -1, B = .05 * S, J = .002 * S
    };
    this.doFrameUpdate = function () {
        f = clock.getDelta();
        var e = !1,
            d = !1;
        if (l && !a.is_paused) {
            aa.update();
            R.update();
            M.update();
            (0 <= J && 0 <= F && u.rotation.z >= B - .01 || 0 > J && 0 > F && u.rotation.z <= B + .01) && a.doNextTilt();
            B > u.rotation.z ? (F = Math.min(F + .001, J, .1 * (B - u.rotation.z)), u.rotation.z += F) : B < u.rotation.z && (F = Math.max(F - .001, J, .1 * (B - u.rotation.z)), u.rotation.z += F);
            u.position.y = 1 * aa.value;
            switch (I) {
                case 0:
                    b ? (__input.right ? (v = Math.min(1, v + .1), x = Math.min(1,
                        x + .015), e = !0) : __input.left && (v = Math.max(-1, v - .1), x = Math.max(-1, x - .015), e = !0), a.right_down ? (v = Math.min(1, v + .1), x = Math.min(1, x + .015), d = !0) : a.left_down && (v = Math.max(-1, v - .1), x = Math.max(-1, x - .015), d = !0), d || e || (v *= .9, x *= .98)) : x = v = 0;
                    e = .05 * R.value + .3 * v;
                    p.rotation.z = p.my_rot.z + e;
                    n.rotation.z = n.my_rot.z + e;
                    q.rotation.z = q.my_rot.z + .5 * e;
                    e = .4 * M.value_normal;
                    p.position.x = p.my_pos.x + e;
                    n.position.x = n.my_pos.x + e;
                    q.position.x = q.my_pos.x + e;
                    d = .2 * v;
                    p.position.y = p.my_pos.y + d;
                    n.position.y = n.my_pos.y + d;
                    q.position.y = q.my_pos.y +
                        d;
                    p.position.x += Math.abs(d);
                    n.position.x += Math.abs(d);
                    d = .4 * M.value_normal;
                    y.rotation.x = y.my_rot.x + d;
                    z.rotation.x = z.my_rot.x + d;
                    w.rotation.y = w.my_rot.y + e;
                    A.rotation.y = A.my_rot.y - e;
                    w.rotation.y -= .8 * Math.max(0, v);
                    e = -u.rotation.z / .6;
                    G = b ? .4 * e + .7 * x : 0;
                    ba.update();
                    ca.update();
                    T = Math.min(1, Math.max(T - .01, Math.abs(G / .5)));
                    e = .5 * ba.value * T;
                    d = .5 * ca.value * T;
                    D.rotation.y = D.my_rot.y + e;
                    D.rotation.x = D.my_rot.x + d;
                    E.rotation.y = E.my_rot.y + d;
                    E.rotation.x = E.my_rot.x + e;
                    m.position.x += G;
                    b && (e = Math.abs(G), K = Math.max(0, Math.min(1,
                        K + (oCONFIG.sick_rate * Math.max(0, Math.min(1, e - oCONFIG.health_range[1]) / (oCONFIG.health_range[2] - oCONFIG.health_range[1])) - oCONFIG.repair_rate * Math.max(0, Math.min(1, 1 - (e - oCONFIG.health_range[0]) / (oCONFIG.health_range[1] - oCONFIG.health_range[0])))))), m.sick = m.sick < K ? Math.min(K, m.sick + .05) : Math.max(K, m.sick - .05), e = Math.floor(100 * clock.getElapsedTime()), e != V && (a.score += 1, a.doUpdateGameScore(), V = e), 1 <= K && (b = !1, I = 1), 20 < Math.abs(m.position.x) && (b = m.visible = !1, I = 99, e = new THREE.Vector3, m.getWorldPosition(e),
                        d = e.x ? 0 > e.x ? -1 : 1 : 0, H.position.value = new THREE.Vector3(e.x, e.y, 0), H.velocity.value = new THREE.Vector3(15 * -d, 40, 0), H.angle.value = 0 > d ? [__utils.radFromDeg(0), __utils.radFromDeg(180)] : [__utils.radFromDeg(360), __utils.radFromDeg(180)], H.enable(), __snds.playSound("sfx_splash", "blobby"), a.doGameOver()));
                    break;
                case 1:
                    0 > m.position.x ? (G += .02, m.position.x += Math.min(G, .1 * (0 - m.position.x))) : 0 < m.position.x && (G -= .02, m.position.x += Math.max(G, .1 * (0 - m.position.x)));
                    p.rotation.z += .1 * (p.my_rot.z - p.rotation.z);
                    n.rotation.z +=
                        .1 * (n.my_rot.z - n.rotation.z);
                    q.rotation.z += .1 * (q.my_rot.z - q.rotation.z);
                    p.position.x += .1 * (p.my_pos.x - p.position.x);
                    n.position.x += .1 * (n.my_pos.x - n.position.x);
                    q.position.x += .1 * (q.my_pos.x - q.position.x);
                    p.position.y += .1 * (p.my_pos.y - p.position.y);
                    n.position.y += .1 * (n.my_pos.y - n.position.y);
                    q.position.y += .1 * (q.my_pos.y - q.position.y);
                    y.position.y += .1 * (y.my_pos.y - y.position.y);
                    z.position.y += .1 * (z.my_pos.y - z.position.y);
                    w.position.y += .1 * (w.my_pos.y - w.position.y);
                    A.position.y += .1 * (A.my_pos.y - A.position.y);
                    .1 > Math.abs(m.position.x) && (m.actor.motions.barf.play(), m.actor.motions.barf.setLoop(THREE.LoopOnce, 0), m.actor.motions.barf.clampWhenFinished = !0, m.actor.motions.barf.fadeIn(.25), __snds.playSound("sfx_barf", "blobby"), I = 2);
                    break;
                case 2:
                    !Z && .6 <= m.actor.motions.barf.time && (Z = !0, U = a.doCreateJr(), u.add(U), U.position.set(0, 0, 6));
                    Z && (m.sick = Math.max(0, m.sick - .01));
                    if (!m.actor.motions.barf.isRunning()) {
                        e = [p, n, q, W, w, A, X, Y, y, z];
                        for (d = 0; d < e.length; d++) e[d].my_rot = e[d].rotation.clone(), e[d].my_pos = e[d].position.clone();
                        C = 0;
                        I = 3
                    }
                    break;
                case 3:
                    m.sick = Math.max(0, m.sick - .01);
                    e = .05 * R.value * C;
                    p.rotation.z = p.my_rot.z + e;
                    n.rotation.z = n.my_rot.z + e;
                    q.rotation.z = q.my_rot.z + .5 * e;
                    e = .4 * M.value_normal * C;
                    p.position.x = p.my_pos.x + e;
                    n.position.x = n.my_pos.x + e;
                    q.position.x = q.my_pos.x + e;
                    C = Math.min(1, C + .03);
                    0 >= m.sick && (I = 4, D.rotation.x = D.my_rot.x + .4, E.rotation.x = E.my_rot.x + .4, P.rotation.x = P.my_rot.x - .5, Q.rotation.x = Q.my_rot.x - .5, __snds.playSound("sfx_papa", "blobby"), setTimeout(a.doGameOver, 1E3));
                    break;
                case 4:
                    e = .05 * R.value * C, p.rotation.z =
                        p.my_rot.z + e, n.rotation.z = n.my_rot.z + e, q.rotation.z = q.my_rot.z + .5 * e, e = .4 * M.value_normal * C, p.position.x = p.my_pos.x + e, n.position.x = n.my_pos.x + e, q.position.x = q.my_pos.x + e, C = Math.min(1, C + .03)
            }
            for (d = 0; d < c.length; d++) c[d].doUpdate();
            oMODELS.sky.offset.x += .003;
            L.tick(void 0);
            r.render(l, t)
        }
    };
    a.doInit()
};
//var __snds, __utils, __localscaver, __input, oSTAGE, oLANG, oLANG_IMAGES, oVARS, oCONFIG, oUSER, oMODELS, LOADER, THREELOADER, SCREEN, CONTROLS, LEGAL, images, GAME, update_queue = [],
//    actives = [],
//   window_in_background = !1,
//    game_is_active = !1,
//    date_msg, stats, loader, clock = new THREE.Clock(!0);

function doFrameLoop() {
    stats && stats.begin();
    for (var a = 0; a < actives.length; a++) actives[a].purge || actives[a].forget ? actives.splice(a, 1) : actives[a].doUpdate ? actives[a].doUpdate() : actives.splice(a, 1);
    stats && stats.end();
    requestAnimationFrame(doFrameLoop)
}

function doInit() {
    sCode.trackGame("blobbyondeck", "start");
    oCONFIG.debug_stats && (stats = new Stats, stats.showPanel(0), document.body.appendChild(stats.dom));
    __utils = new BlitTools;
    __snds = new myNameSpace.BlitSounds;
    __localsaver = new BlitSaver;
    __input = new BlitInputs;
    loader = new createjs.LoadQueue(!1);
    loader.installPlugin(createjs.Sound);
    doFrameLoop();
    oVARS = __utils.getQueryString();
    oSTAGE = {};
    var a = document.getElementById("canvas_game");
    a.renderer = new THREE.WebGLRenderer({
        canvas: a,
        antialias: !0,
        alpha: !1,
        shadows: !1
    });
    a.renderer.autoClear = !1;
    a.renderer.shadowMap.enabled = !0;
    oUSER = __localsaver.doGetData("user");
    oUSER || (oUSER = {
        is_mute: !1,
        best_score: 0
    }, __localsaver.doSaveData("user", oUSER));
    __utils.doInitResizer(doWindowResize);
    doWindowResize();
    var a = new Date(date_day_before),
        d = new Date(date_week_before),
        b = new Date;
    date_msg = b >= new Date(date_playing) ? oLANG.date_msg_4 : b >= a ? oLANG.date_msg_3 : b >= d ? oLANG.date_msg_2 : oLANG.date_msg_1;
    __utils.doInitFocusManager(doLoseFocus, doGetFocus);

    try {
        nz.nzappapi.AppVisible();
    }
    catch (err) {
        console.log("Error calling AppVisible.");
    }
    
    doPreloadAssets()
}

function doLoseFocus() {
    __snds.forceMute();
    window_in_background = !0;
    GAME && GAME.doPause()
}

function doGetFocus() {
    window_in_background = !1;
    GAME ? GAME.is_paused || __snds.unforceMute() : __snds.unforceMute()
}

function doPreloadAssets() {
    for (var a = 0; a < legal_images.length; a++) {
        var d = legal_images[a].src;
        photo_name = d.substr(d.lastIndexOf("/") + 1);
        assets_preload.manifest.push({
            src: d,
            id: photo_name
        })
    }
    platform.isMobile ? assets_preload.manifest.push({
        src: "media/instructions.gif",
        id: "instructions"
    }) : assets_preload.manifest.push({
        src: "media/instructions_PC.gif",
        id: "instructions_desktop"
    });
    var b = my_performance.now();
    __utils.doLoadAssets(assets_preload);
    LOADER = new Loader(!0);
    LOADER.doUpdate = function () {
        this.doUpdateBar(assets_preload.progress);
        if (assets_preload.loaded) {
            this.forget = !0;
            var a = my_performance.now() - b;
            window.setTimeout(function () {
                doStart();
                LOADER.doFadeAndDestroy()
            }, Math.max(0, 1E3 * oCONFIG.splash_hold - a))
        }
    };
    actives.push(LOADER)
}

function doStart() {
    document.body.style.backgroundImage = "url('media/bg_title.jpg')";
    LEGAL = new LegalPanel;
    CONTROLS = new ControlsPanel;
    SCREEN = new TitleScreen;
    __utils.doLoadAssets(assets_additional);
    oMODELS = {};
    __utils.doLoad3dAssets(assets_threejs, oMODELS)
}

function doFinishLoading(a) {
    LOADER = new Loader;
    LOADER.doUpdate = function () {
        this.doUpdateBar(.5 * (assets_additional.progress + assets_threejs.progress));
        assets_additional.loaded && assets_threejs.loaded && (this.purge = !0, a && a(), LOADER.doFadeAndDestroy())
    };
    actives.push(LOADER)
}

function doWindowResize() {
    window.innerWidth > window.innerHeight ? (oSTAGE.is_landscape = !0, oSTAGE.scale = Math.min(Infinity, Math.min(window.innerHeight / 550, window.innerWidth / 900))) : (oSTAGE.is_landscape = !1, oSTAGE.scale = Math.min(Infinity, Math.min(window.innerHeight / 800, window.innerWidth / 600)));
    oSTAGE.scale_inv = 1 / oSTAGE.scale;
    oSTAGE.screen_width = Math.ceil(window.innerWidth);
    oSTAGE.screen_height = Math.ceil(window.innerHeight);
    oSTAGE.window_width = Math.ceil(window.innerWidth * oSTAGE.scale_inv);
    oSTAGE.window_height =
        Math.ceil(window.innerHeight * oSTAGE.scale_inv);
    oSTAGE.wrapper_height = Math.ceil(window.innerHeight * oSTAGE.scale_inv);
    oSTAGE.wrapper_width = Math.ceil(window.innerWidth * oSTAGE.scale_inv);
    oSTAGE.wrapper_ratio = oSTAGE.wrapper_height / oSTAGE.wrapper_width;
    oSTAGE.physical_ppi = __utils.getPPI();
    oSTAGE.ppi_scale = oSTAGE.physical_ppi / 96;
    var a = document.getElementById("div_screens");
    a.style.transform = a.style.webkitTransform = "scale(" + oSTAGE.scale + "," + oSTAGE.scale + ")";
    a.style.width = Math.ceil(oSTAGE.wrapper_width) + "px";
    a.style.height = Math.ceil(oSTAGE.wrapper_height) + "px";
    for (a = update_queue.length - 1; 0 <= a; a--) update_queue[a].forget ? update_queue.splice(a, 1) : update_queue[a].doResizeUpdate ? update_queue[a].doResizeUpdate() : update_queue.splice(a, 1)
};